openapi: 3.0.3
info:
  title: Bank Cards API
  version: 1.0.0
  description: >-
    REST API для управления банковскими картами.
    Поддерживает: регистрация/логин (JWT), CRUD карт, переводы между своими картами, управление пользователями (ADMIN).
servers:
  - url: http://localhost:8080
    description: local

components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT

  schemas:
    AuthRequest:
      type: object
      required:
        - username
        - password
      properties:
        username:
          type: string
        password:
          type: string
    AuthResponse:
      type: object
      properties:
        token:
          type: string
    RegisterRequest:
      type: object
      required:
        - username
        - password
      properties:
        username:
          type: string
        password:
          type: string

    CardRequest:
      type: object
      required:
        - cardNumber
        - owner
        - expiryDate
      properties:
        cardNumber:
          type: string
          description: '16 digits'
          example: "4000123412341234"
        owner:
          type: string
          example: "Ivan Ivanov"
        expiryDate:
          type: string
          format: date
          example: "2027-08-31"

    CardResponse:
      type: object
      properties:
        id:
          type: integer
        maskedCardNumber:
          type: string
          example: "**** **** **** 1234"
        owner:
          type: string
        expiryDate:
          type: string
          format: date
        status:
          type: string
          enum: [ACTIVE, BLOCKED, EXPIRED]
        balance:
          type: number
          format: double

    TransferRequest:
      type: object
      required:
        - fromCardId
        - toCardId
        - amount
      properties:
        fromCardId:
          type: integer
        toCardId:
          type: integer
        amount:
          type: number
          format: double
          minimum: 0.01

    TransferResponse:
      type: object
      properties:
        transactionId:
          type: integer
        fromCardId:
          type: integer
        toCardId:
          type: integer
        amount:
          type: number
          format: double
        timestamp:
          type: string
          format: date-time

    UserRegisterRequest:
      type: object
      required:
        - username
        - password
      properties:
        username:
          type: string
        password:
          type: string

    UserResponse:
      type: object
      properties:
        id:
          type: integer
        username:
          type: string

  responses:
    Unauthorized:
      description: JWT missing or invalid
      content:
        application/json:
          schema:
            type: object
            properties:
              message:
                type: string

paths:
  /api/auth/register:
    post:
      summary: Регистрация пользователя (возвращает JWT)
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RegisterRequest'
      responses:
        '200':
          description: Успешная регистрация
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthResponse'

  /api/auth/login:
    post:
      summary: Логин — получить JWT
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AuthRequest'
      responses:
        '200':
          description: Успешный логин
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthResponse'

  /api/cards:
    get:
      summary: Получить список карт (поиск + пагинация)
      security:
        - bearerAuth: []
      parameters:
        - in: query
          name: page
          schema:
            type: integer
          description: Номер страницы
        - in: query
          name: size
          schema:
            type: integer
          description: Размер страницы
        - in: query
          name: search
          schema:
            type: string
          description: Поиск по номеру/владельцу
      responses:
        '200':
          description: Список карт
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/CardResponse'
        '401':
          $ref: '#/components/responses/Unauthorized'

    post:
      summary: Создать карту (ADMIN)
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CardRequest'
      responses:
        '200':
          description: Создана карта
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CardResponse'

  /api/cards/{id}:
    get:
      summary: Получить карту по id
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: Карта
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CardResponse'
        '404':
          description: Не найдено

    delete:
      summary: Удалить карту (ADMIN)
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: Удалено

  /api/cards/{id}/block:
    put:
      summary: Заблокировать карту (ADMIN)
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: Заблокировано

  /api/cards/{id}/activate:
    put:
      summary: Активировать карту (ADMIN)
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: Активировано

  /api/cards/{id}/request-block:
    put:
      summary: Пользователь запрашивает блокировку своей карты (USER)
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: Запрос на блокировку принят

  /api/transfers:
    post:
      summary: Перевод между своими картами (USER)
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TransferRequest'
      responses:
        '200':
          description: Результат перевода
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TransferResponse'
        '400':
          description: Невалидные данные или недостаточно средств

  /api/users:
    get:
      summary: Получить всех пользователей (ADMIN)
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Список пользователей
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/UserResponse'

    post:
      summary: Создать пользователя (ADMIN)
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserRegisterRequest'
      responses:
        '200':
          description: Пользователь создан
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserResponse'

  /api/users/{id}:
    get:
      summary: Получить пользователя по id (ADMIN)
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: Пользователь
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserResponse'

    put:
      summary: Обновить пользователя (ADMIN)
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: integer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserRegisterRequest'
      responses:
        '200':
          description: Обновлён

    delete:
      summary: Удалить пользователя (ADMIN)
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: Удалён
